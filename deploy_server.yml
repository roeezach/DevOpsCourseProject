---
- name: create final project app on cloud
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env
  vars:
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: ~/.ssh/first-key.pem
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

  tasks:
  - name: create VPC
    amazon.aws.ec2_vpc_net:
      name: "{{ vpc_name }}" 
      cidr_block: "{{ network }}"
      region: "{{ zone }}"
      state: present
      dns_hostnames: yes
      dns_support: yes
      multi_ok: no
      tags:
        Name: "{{ vpc_name }}"
    register: vpc

  - name: Add VPC definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'vpc_id: '
      line: 'vpc_id: {{ vpc.vpc.id }}'
      state: present
      create: True

  - name: associate subnet to the VPC
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ zone }}"
      cidr: "{{ subnet_public }}"
      map_public: yes
      az: "{{ subnet1 }}"
      tags:
          Name: "{{ vpc_name }}"
      wait: yes
    register: subnet

  - name: Save subnet ID to env file
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'subnet_id: '
      line: "subnet_id: {{ subnet.subnet.id }}"
      state: present
      create: true

  - name: create IGW
    amazon.aws.ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ zone }}"
      state: present 
      tags:
        Name: "{{ vpc_name }}_igw"
    register: igw

  - name: Add IGW definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'igw_id: '
      line: 'igw_id: {{ igw.gateway_id }}'
      state: present
      create: True

  - name: Route table for public Subnet
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}" 
      region: "{{ zone }}"
      state: present
      subnets:
        - "{{ subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      tags:
        Name: "{{ vpc_name }}_public_rt"
    register: route_table

  - name: Save route table ID to env file
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'rt_id: '
      line: "rt_id: {{ route_table.route_table.id }}"
      state: present
      create: true

  - name: Create security group
    amazon.aws.ec2_group:
      name: "{{ vpc_name }}-sg"
      description: "Security group for {{ vpc_name }}"
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ zone }}"
      state: present
      rules:
        - proto: tcp
          ports:
            - 22
            - 80
            - 3000
          cidr_ip: 0.0.0.0/0
      tags:
        Name: "{{ vpc_name }}-sg"
    register: sg

  - name: Save Security Group ID to env
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'sg_id:'
      line: "sg_id: {{ sg.group_id }}"
      state: present
      create: true

  - name: Create server
    amazon.aws.ec2_instance:
      image_id: "{{ aws_ubuntu_ami }}"
      wait: yes
      instance_type: "{{ Server_type }}"
      region: "{{ zone }}"
      key_name: "{{ keypair }}"
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_type: gp3
            volume_size: "{{ server_volume_size }}"
            delete_on_termination: true
      tags:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      exact_count: 1
      wait_timeout: 300
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      security_group: "{{ sg.group_id }}"
      network:
        assign_public_ip: yes
      state: running
    register: server_ec2

  - name: get ip of instance
    amazon.aws.ec2_instance_info:
      filters:
        "tag:Name": "{{ server_name }}"
        instance-state-name: [ "running" ]
    register: ec2_data
      
  - debug:
      msg: "Your app is deployed and running at http://{{ ec2_data.instances[0].public_ip_address }}"

  - name: Add server public IP to application host group
    add_host:
      name: "{{ ec2_data.instances[0].public_ip_address }}"
      groups: app
      ansible_ssh_private_key_file: ~/.ssh/first-key.pem
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

  - name: Add Public IP definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'server_id: '
      line: 'server_id: {{ ec2_data.instances[0].instance_id }}'
      state: present
      create: True

  - name: Save EC2 public IP to env file
    ansible.builtin.lineinfile:
      path: group_vars/final-project.env
      regexp: 'ec2_public_ip: '
      line: "ec2_public_ip: {{ server_ec2.instances[0].public_ip_address }}"
      state: present
      create: true

  - name: Wait for SSH to start using external IP
    wait_for:
      host: "{{ ec2_data.instances[0].public_ip_address }}"
      port: 22
      timeout: 300

  - name: Pause for ubuntu user access after boot
    ansible.builtin.pause:
      seconds: 30

- name: Setup web server
  hosts: app
  user: ubuntu
  become: yes
  gather_facts: False
  vars:
    ansible_ssh_private_key_file: ~/.ssh/first-key.pem
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    ansible_host_key_checking: false
  vars_files:
    - group_vars/docker.env
    
  tasks: 
    - name: add GPG key_name
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker Repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        state: present
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - git
        state: latest
        update_cache: true

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: restart Docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    - name: Copy SSH private key to remote server for git access
      copy:
        src: ~/.ssh/first-key.pem
        dest: /home/ubuntu/.ssh/id_rsa
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      become: yes

    - name: Create /opt/app directory with correct permissions
      file:
        path: /opt/app
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      become: yes

    - name: Clone my app repo
      git:
        repo: git@github.com:roeezach/DevOpsCourseProject.git
        dest: /opt/app
        version: main
        force: yes
        accept_hostkey: yes
      become: yes
      become_user: ubuntu



    - name: Change ownership of app directory
      file:
        path: /opt/app
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: build docker image
      shell: docker build . --tag {{ docker_user }}/pass_gen:latest
      args:
        chdir: /opt/app
      become: true

    - name: login to DockerHub
      shell: docker login -u {{ docker_user }} -p {{ docker_token }}
      args:
        chdir: /opt/app
      become: true

    - name: push docker image
      shell: docker push {{ docker_user }}/pass_gen:latest
      args:
        chdir: /opt/app
      become: true

    - name: start docker app
      shell: docker compose up -d
      args:
        chdir: /opt/app
      become: true

    - name: get public IP from server
      shell: curl -s ident.me
      register: ip_address

    - debug:
        msg: "Host secret : {{ ip_address.stdout }}"

    - name: Print access URL
      debug:
        msg: "Your app is deployed! Access it at: http://{{ ip_address.stdout }}:3000"
